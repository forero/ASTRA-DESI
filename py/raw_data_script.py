# -*- coding: utf-8 -*-
"""Raw_data_script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rn7tw2LayYu6Ta9SCUc2t27aHYF1Q_Xo
"""

import os
import pandas as pd
import numpy as np
from astropy.io import fits
from glob import glob

# Parameters
base_url = "https://data.desi.lbl.gov/public/edr/vac/edr/lss/v2.0/LSScats/clustering/"
tracers = ['BGS_ANY', 'ELG', 'LRG', 'QSO']
real_suffix = {'N': '_N_clustering.dat.fits', 'S': '_S_clustering.dat.fits'}
random_suffix = {'N': '_N_{}_clustering.ran.fits', 'S': '_S_{}_clustering.ran.fits'}
n_random_files = 18
selected_columns = ['TARGETID', 'ROSETTE_NUMBER', 'RA', 'DEC', 'Z']

def load_real_data(tracer):
    dfs = []
    for hemi in ['N', 'S']:
        filename = f"{tracer}{real_suffix[hemi]}"
        path = os.path.join(base_url, filename)
        with fits.open(path) as hdul:
            data = hdul[1].data
            df = pd.DataFrame({col: data[col] for col in selected_columns})
        df = df.rename(columns={'ROSETTE_NUMBER': 'ZONE'})
        df['TRACERTYPE'] = f"{tracer.split('_')[0]}_REAL"
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

real_all = pd.concat([load_real_data(tr) for tr in tracers], ignore_index=True)

def load_random_data(tracer):
    dfs = []
    for hemi in ['N', 'S']:
        for i in range(n_random_files):
            filename = f"{tracer}{random_suffix[hemi].format(i)}"
            path = os.path.join(base_url, filename)
            with fits.open(path) as hdul:
                data = hdul[1].data
                df = pd.DataFrame({col: data[col] for col in selected_columns})
            df = df.rename(columns={'ROSETTEID': 'ZONE'})
            df['TRACERTYPE'] = f"{tracer.split('_')[0]}_RAND"
            dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

random_all = pd.concat([load_random_data(tr) for tr in tracers], ignore_index=True)

def sample_randoms(random_df, multiplier=100):
    grouped = random_df.groupby(['TRACERTYPE', 'ZONE'], group_keys=False)
    return grouped.apply(lambda g: g.sample(n=multiplier * len(g), replace=True)).reset_index(drop=True)

random_100x = sample_randoms(random_all)

from astropy.table import Table

output_dir = "01_CREATE_RAW"
os.makedirs(output_dir, exist_ok=True)

for zone in range(20):
    real_zone = real_all[real_all['ZONE'] == zone]
    rand_zone = random_100x[random_100x['ZONE'] == zone]
    combined = pd.concat([real_zone, rand_zone], ignore_index=True)

    # Keep final column order
    combined = combined[['TARGETID', 'TRACERTYPE', 'RA', 'DEC', 'Z', 'ZONE']]

    # Write as FITS
    table = Table.from_pandas(combined)
    table.write(os.path.join(output_dir, f"ZONE_{zone:02d}.fits.gz"), overwrite=True)
